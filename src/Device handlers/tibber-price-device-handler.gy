/**
 *  Copyright 2017 Tibber
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Tibber price
 *
 *  Author: tibberdev
 *
 *  Date: 2017-12-19
 */
metadata {
	definition (name: "Tibber price device handler", namespace: "Tibber", author: "tibberdev") {
		capability "Sensor"
		attribute "price", "number"
		attribute "currency", "string"
	}
	// tile definitions
	tiles() {
            multiAttributeTile(name:"valueTile", type:"generic", width:6, height:4, backgroundColor:"#00a0dc") {
                tileAttribute("device.price", key: "PRIMARY_CONTROL") {
                    attributeState "price", label:'${currentValue}', defaultState: true
                }
                tileAttribute("device.currency", key: "SECONDARY_CONTROL") {
                    attributeState "currency", label:'${currentValue}', defaultState: true
                }
            }
			main (["valueTile"])
	}
}

def initialize() {
	log.debug("init")
    getPrice()
    schedule("0 2 * * * ?", getPrice)
}
def installed() {
	log.debug "Installed"
    initialize()
}
def updated() {
	log.debug "Updated"
    initialize()
}
def getPrice() {
	state.authToken = "YOUR_TIBBER_ACCESS_TOKEN"// https://developer.tibber.com/settings/accesstoken
	log.debug("getprice")
	log.debug( state.authToken)
    def params = [
        uri: "https://api.tibber.com/v1-beta/gql",
        headers: ["Content-Type": "application/json;charset=UTF-8" , "Authorization": "Bearer ${state.authToken}"],
        body: '{"query": "{viewer {homes {currentSubscription {priceInfo {current {total currency}}}}}}", "variables": null, "operationName": null}'
	]
    try {
        httpPostJson(params) { resp ->
            log.debug "response contentType: ${resp.contentType} status: ${resp.status} data:${resp.data}"
            if(resp.status == 200){
                def price = resp.data.data.viewer.homes[0].currentSubscription.priceInfo.current.total
                def currency = resp.data.data.viewer.homes[0].currentSubscription.priceInfo.current.currency
                state.price = price
                state.currency = currency
                sendEvent(name: "price", value: state.price, unit: currency)
                sendEvent(name: "currency", value: state.currency, unit: currency)
            }
        }
    } catch (e) {
        log.debug "something went wrong: $e"
    }
}
def parse(String description) {
    log.debug "parse description: ${description}"
    def event1 = createEvent(name: "price", value: state.price, unit: state.currency)
    def event2 = createEvent(name: "currency", value: state.currency, unit: state.currency)
    log.debug "Parse returned ${description}"
    return [event1,event2]
}